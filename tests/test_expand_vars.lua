local ut = require('tests.unitester')
ut.setup()

describe('Variable expansion tests', function()
  local proj = require('exer.proj')

  it('correctly expands ${file}', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('python ${file}')
      assert.matches('./tmp/test%.py', cmd)
    end)
  end)

  it('correctly expands ${dir}', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('cd ${dir}')
      assert.matches('./tmp', cmd)
    end)
  end)

  it('correctly expands ${name}', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('python ${name}.py')
      assert.matches('test%.py', cmd)
    end)
  end)

  it('correctly expands ${ext}', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('echo ${ext}')
      assert.matches('py', cmd)
    end)
  end)

  it('correctly expands ${stem}', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('cp ${stem} backup')
      assert.matches('test%.py', cmd)
    end)
  end)

  it('correctly expands ${root}', function()
    ut.withTestFile('./tmp/test_proj/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('cd ${root}')
      assert.matches('./tmp/test_proj', cmd)
    end)
  end)

  it('correctly expands multiple variables', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('python ${file} --output ${dir}/result')
      assert.matches('./tmp/test%.py', cmd)
      assert.matches('./tmp/result', cmd)
    end)
  end)

  it('expands array commands', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmds = proj.expandVars({ 'echo ${file}', 'python ${file}' })
      assert.are.equal('table', type(cmds))
      assert.matches('./tmp/test%.py', cmds[1])
      assert.matches('./tmp/test%.py', cmds[2])
    end)
  end)

  it('preserves unknown variables', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('echo ${unknown}')
      assert.matches('${unknown}', cmd)
    end)
  end)

  it('handles complex commands', function()
    ut.withTestFile('./tmp/test.c', 'int main() { return 0; }', function()
      local cmd = proj.expandVars('gcc ${name}.c -o ${name} && ./${name}')
      assert.matches('gcc test%.c %-o test && %./test', cmd)
    end)
  end)

  it('correctly expands ${filename}', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('cp ${filename} backup')
      assert.matches('test%.py', cmd)
    end)
  end)

  it('correctly expands ${filetype}', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('echo ${filetype}')
      assert.matches('python', cmd)
    end)
  end)

  it('correctly expands ${fullname}', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('gcc ${fullname}.o')
      assert.matches('./tmp/test%.o', cmd)
    end)
  end)

  it('correctly expands ${cwd}', function()
    ut.withTestFile('./tmp/test_proj/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('cd ${cwd}')
      assert.matches('./tmp/test_proj', cmd)
    end)
  end)

  it('correctly expands ${dirname}', function()
    ut.withTestFile('./tmp/test_proj/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('echo ${dirname}')
      assert.matches('test_proj', cmd)
    end)
  end)

  it('correctly expands ${servername}', function()
    ut.withTestFile('./tmp/test.py', 'print("hello")', function()
      local cmd = proj.expandVars('echo ${servername}')
      assert.matches('nvim%-test', cmd)
    end)
  end)
end)
